---
source: crates/ruff_python_formatter/tests/fixtures.rs
input_file: crates/ruff_python_formatter/resources/test/fixtures/black/cases/preview_dummy_implementations.py
---
## Input

```python
# flags: --preview
from typing import NoReturn, Protocol, Union, overload


def dummy(a): ...
def other(b): ...


@overload
def a(arg: int) -> int: ...
@overload
def a(arg: str) -> str: ...
@overload
def a(arg: object) -> NoReturn: ...
def a(arg: Union[int, str, object]) -> Union[int, str]:
    if not isinstance(arg, (int, str)):
        raise TypeError
    return arg

class Proto(Protocol):
    def foo(self, a: int) -> int:
        ...

    def bar(self, b: str) -> str: ...
    def baz(self, c: bytes) -> str:
        ...


def dummy_two():
    ...
@dummy
def dummy_three():
    ...

def dummy_four():
    ...

@overload
def b(arg: int) -> int: ...

@overload
def b(arg: str) -> str: ...
@overload
def b(arg: object) -> NoReturn: ...

def b(arg: Union[int, str, object]) -> Union[int, str]:
    if not isinstance(arg, (int, str)):
        raise TypeError
    return arg
```

## Black Differences

```diff
--- Black
+++ Ruff
@@ -1,16 +1,30 @@
+# flags: --preview
 from typing import NoReturn, Protocol, Union, overload
 
 
-def dummy(a): ...
-def other(b): ...
+def dummy(a):
+    ...
+
+
+def other(b):
+    ...
 
 
 @overload
-def a(arg: int) -> int: ...
+def a(arg: int) -> int:
+    ...
+
+
 @overload
-def a(arg: str) -> str: ...
+def a(arg: str) -> str:
+    ...
+
+
 @overload
-def a(arg: object) -> NoReturn: ...
+def a(arg: object) -> NoReturn:
+    ...
+
+
 def a(arg: Union[int, str, object]) -> Union[int, str]:
     if not isinstance(arg, (int, str)):
         raise TypeError
@@ -18,28 +32,42 @@
 
 
 class Proto(Protocol):
-    def foo(self, a: int) -> int: ...
+    def foo(self, a: int) -> int:
+        ...
+
+    def bar(self, b: str) -> str:
+        ...
 
-    def bar(self, b: str) -> str: ...
-    def baz(self, c: bytes) -> str: ...
+    def baz(self, c: bytes) -> str:
+        ...
+
+
+def dummy_two():
+    ...
 
 
-def dummy_two(): ...
 @dummy
-def dummy_three(): ...
+def dummy_three():
+    ...
 
 
-def dummy_four(): ...
+def dummy_four():
+    ...
 
 
 @overload
-def b(arg: int) -> int: ...
+def b(arg: int) -> int:
+    ...
 
 
 @overload
-def b(arg: str) -> str: ...
+def b(arg: str) -> str:
+    ...
+
+
 @overload
-def b(arg: object) -> NoReturn: ...
+def b(arg: object) -> NoReturn:
+    ...
 
 
 def b(arg: Union[int, str, object]) -> Union[int, str]:
```

## Ruff Output

```python
# flags: --preview
from typing import NoReturn, Protocol, Union, overload


def dummy(a):
    ...


def other(b):
    ...


@overload
def a(arg: int) -> int:
    ...


@overload
def a(arg: str) -> str:
    ...


@overload
def a(arg: object) -> NoReturn:
    ...


def a(arg: Union[int, str, object]) -> Union[int, str]:
    if not isinstance(arg, (int, str)):
        raise TypeError
    return arg


class Proto(Protocol):
    def foo(self, a: int) -> int:
        ...

    def bar(self, b: str) -> str:
        ...

    def baz(self, c: bytes) -> str:
        ...


def dummy_two():
    ...


@dummy
def dummy_three():
    ...


def dummy_four():
    ...


@overload
def b(arg: int) -> int:
    ...


@overload
def b(arg: str) -> str:
    ...


@overload
def b(arg: object) -> NoReturn:
    ...


def b(arg: Union[int, str, object]) -> Union[int, str]:
    if not isinstance(arg, (int, str)):
        raise TypeError
    return arg
```

## Black Output

```python
from typing import NoReturn, Protocol, Union, overload


def dummy(a): ...
def other(b): ...


@overload
def a(arg: int) -> int: ...
@overload
def a(arg: str) -> str: ...
@overload
def a(arg: object) -> NoReturn: ...
def a(arg: Union[int, str, object]) -> Union[int, str]:
    if not isinstance(arg, (int, str)):
        raise TypeError
    return arg


class Proto(Protocol):
    def foo(self, a: int) -> int: ...

    def bar(self, b: str) -> str: ...
    def baz(self, c: bytes) -> str: ...


def dummy_two(): ...
@dummy
def dummy_three(): ...


def dummy_four(): ...


@overload
def b(arg: int) -> int: ...


@overload
def b(arg: str) -> str: ...
@overload
def b(arg: object) -> NoReturn: ...


def b(arg: Union[int, str, object]) -> Union[int, str]:
    if not isinstance(arg, (int, str)):
        raise TypeError
    return arg
```


