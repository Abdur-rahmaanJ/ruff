---
source: crates/ruff_python_formatter/tests/fixtures.rs
input_file: crates/ruff_python_formatter/resources/test/fixtures/black/cases/python37.py
---
## Input

```python
# flags: --minimum-version=3.7


def f():
    return (i * 2 async for i in arange(42))


def g():
    return (
        something_long * something_long
        async for something_long in async_generator(with_an_argument)
    )


async def func():
    if test:
        out_batched = [
            i
            async for i in aitertools._async_map(
                self.async_inc, arange(8), batch_size=3
            )
        ]


def awaited_generator_value(n):
    return (await awaitable for awaitable in awaitable_list)


def make_arange(n):
    return (i * 2 for i in range(n) if await wrap(i))
```

## Black Differences

```diff
--- Black
+++ Ruff
@@ -1,3 +1,6 @@
+# flags: --minimum-version=3.7
+
+
 def f():
     return (i * 2 async for i in arange(42))
 
```

## Ruff Output

```python
# flags: --minimum-version=3.7


def f():
    return (i * 2 async for i in arange(42))


def g():
    return (
        something_long * something_long
        async for something_long in async_generator(with_an_argument)
    )


async def func():
    if test:
        out_batched = [
            i
            async for i in aitertools._async_map(
                self.async_inc, arange(8), batch_size=3
            )
        ]


def awaited_generator_value(n):
    return (await awaitable for awaitable in awaitable_list)


def make_arange(n):
    return (i * 2 for i in range(n) if await wrap(i))
```

## Black Output

```python
def f():
    return (i * 2 async for i in arange(42))


def g():
    return (
        something_long * something_long
        async for something_long in async_generator(with_an_argument)
    )


async def func():
    if test:
        out_batched = [
            i
            async for i in aitertools._async_map(
                self.async_inc, arange(8), batch_size=3
            )
        ]


def awaited_generator_value(n):
    return (await awaitable for awaitable in awaitable_list)


def make_arange(n):
    return (i * 2 for i in range(n) if await wrap(i))
```


